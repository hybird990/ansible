- name: Query certificates expiring in X days from local CA
  hosts: 192.168.1.11
  gather_facts: no

  vars:
    ca_config: "vmware.local\\vmware-ADDNS-CA-1"
    days_until_expiry: "{{ days_until_expiry_input | int }}"
    temp_file: "C:\\Windows\\Temp\\certutil_output.txt"

  tasks:
    - name: Run certutil and save output to a file
      win_shell: certutil -view -out "RequestID,CommonName,NotAfter" -config "{{ ca_config }}" > "{{ temp_file }}"

    - name: Parse certutil output and filter certificates expiring within given days
      win_shell: |
        $expiry = (Get-Date).AddDays({{ days_until_expiry }})
        Write-Output "Expiry cutoff date: $expiry"

        $lines = Get-Content "{{ temp_file }}"
        $results = @()

        for ($i = 0; $i -lt $lines.Count; $i++) {
          if ($lines[$i] -match '^Issued Request ID:\s*(\S+)') {
            $requestId = $matches[1]
            $commonName = ''
            $notAfterStr = ''

            if ($i+1 -lt $lines.Count -and $lines[$i+1] -match '^Issued Common Name:\s*"?(.+?)"?$') {
              $commonName = $matches[1] -ne 'EMPTY' ? $matches[1] : ''
            }

            if ($i+2 -lt $lines.Count -and $lines[$i+2] -match '^Certificate Expiration Date:\s*(.+)$') {
              $notAfterStr = $matches[1]
            }

            try {
              $notAfter = Get-Date $notAfterStr -ErrorAction Stop
              if ($notAfter -lt $expiry) {
                $results += "RequestID: $requestId`nCommonName: $commonName`nExpires: $notAfter`n---"
              }
            } catch { }
          }
        }

        if ($results.Count -eq 0) {
          Write-Output "No certificates expiring within {{ days_until_expiry }} days."
        } else {
          $results -join "`n"
        }
      register: filtered_certs

    - name: Show filtered expiring certificates
      debug:
        msg: "{{ filtered_certs.stdout_lines }}"

    - name: Clean up temporary file
      win_file:
        path: "{{ temp_file }}"
        state: absent
