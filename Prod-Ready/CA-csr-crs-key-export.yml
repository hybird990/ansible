- name: Generate, Submit, and Export Certificate from Windows CA
  hosts: 192.168.1.11
  gather_facts: no

  vars:
    country: "{{ country }}"
    state: "{{ state }}"
    city: "{{ city }}"
    organization: "{{ organization }}"
    unit: "{{ unit }}"
    common_name: "{{ common_name }}"
    san_dns:
      - "{{ san1 | default('') }}"
      - "{{ san2 | default('') }}"
    san_ips:
      - "{{ ip1 | default('') }}"
      - "{{ ip2 | default('') }}"
    inf_path: "C:\\temp\\IssuedCerts\\csr_request.inf"
    csr_path: "C:\\temp\\IssuedCerts\\csr_request.req"
    csr_copy_path: "C:\\temp\\IssuedCerts\\copied_{{ common_name }}.req"
    crt_path: "C:\\temp\\IssuedCerts\\{{ common_name }}.crt"
    pfx_path: "C:\\temp\\IssuedCerts\\{{ common_name }}.pfx"
    pfx_password: "StrongPassword123!"
    ca_name: "addns.vmware.local\\vmware-ADDNS-CA-1"
    cert_template: "webserver1"

  tasks:

    - name: Ensure output directory exists
      win_file:
        path: C:\temp\IssuedCerts
        state: directory

    - name: Generate CSR using PowerShell
      win_shell: |
        $InfPath = "{{ inf_path }}"
        $CsrPath = "{{ csr_path }}"
        $Country = "{{ country }}"
        $State = "{{ state }}"
        $City = "{{ city }}"
        $Org = "{{ organization }}"
        $Unit = "{{ unit }}"
        $CN = "{{ common_name }}"
        $Template = "{{ cert_template }}"
        $SanDNS = @()
        $SanIPS = @()

        {% for dns in san_dns %}
        if ("{{ dns }}") { $SanDNS += "{{ dns }}" }
        {% endfor %}
        {% for ip in san_ips %}
        if ("{{ ip }}") { $SanIPS += "{{ ip }}" }
        {% endfor %}

        $inf = '[NewRequest]'
        $inf += "`nSubject = `"C=$Country, ST=$State, L=$City, O=$Org, OU=$Unit, CN=$CN`""
        $inf += "`nKeySpec = 1"
        $inf += "`nKeyLength = 2048"
        $inf += "`nExportable = TRUE"
        $inf += "`nMachineKeySet = TRUE"
        $inf += "`nSMIME = FALSE"
        $inf += "`nPrivateKeyArchive = FALSE"
        $inf += "`nUserProtected = FALSE"
        $inf += "`nUseExistingKeySet = FALSE"
        $inf += "`nProviderName = `"Microsoft RSA SChannel Cryptographic Provider`""
        $inf += "`nProviderType = 12"
        $inf += "`nRequestType = PKCS10"
        $inf += "`nKeyUsage = 0xa0"

        $inf += "`n[RequestAttributes]"
        $inf += "`nCertificateTemplate=$Template"

        $inf += "`n[Extensions]"
        $inf += "`n2.5.29.17 = `{text`}"

        foreach ($dns in $SanDNS) {
            $inf += "`n_continue_ = `"dns=$dns`""
        }
        foreach ($ip in $SanIPS) {
            $inf += "`n_continue_ = `"ipaddress=$ip`""
        }

        Set-Content -Path $InfPath -Value $inf -Encoding ASCII
        certreq -new $InfPath $CsrPath
        Copy-Item -Path $CsrPath -Destination "{{ csr_copy_path }}" -Force
      args:
        executable: powershell

    - name: Submit CSR and retrieve issued certificate (auto-approved)
      win_shell: |
        $CsrPath = "{{ csr_path }}"
        $CertPath = "{{ crt_path }}"
        $CAName = "{{ ca_name }}"
        $Template = "{{ cert_template }}"

        $output = certreq -submit -attrib "CertificateTemplate:$Template" -config "$CAName" $CsrPath $CertPath 2>&1

        if ($output -match "RequestId: (\d+)") {
            Write-Host "Request ID: $($matches[1])"
        } elseif (Test-Path $CertPath) {
            Write-Host "Certificate file saved directly to $CertPath"
        } else {
            Write-Error "Failed to retrieve certificate."
            exit 1
        }

        certreq -accept $CertPath
      args:
        executable: powershell

    - name: Export signed certificate and private key to PFX
      win_shell: |
        $SubjectMatch = "CN={{ common_name }}"
        $Cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.Subject -like "*$SubjectMatch*" } | Sort-Object NotBefore -Descending | Select-Object -First 1

        if (-not $Cert) {
            Write-Error "Certificate not found in local store for CN={{ common_name }}"
            exit 1
        }

        $pwd = ConvertTo-SecureString -String "{{ pfx_password }}" -Force -AsPlainText
        Export-PfxCertificate -Cert $Cert -FilePath "{{ pfx_path }}" -Password $pwd -Force
      args:
        executable: powershell
