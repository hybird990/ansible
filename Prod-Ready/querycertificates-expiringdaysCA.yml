- name: Query certificates expiring in X days from local CA
  hosts: 192.168.1.11
  gather_facts: no

  vars:
    ca_config: "vmware.local\\vmware-ADDNS-CA-1"
    days_until_expiry: "{{ days_until_expiry_input | int }}"

  tasks:
    - name: Capture raw certutil output
      win_shell: certutil -view -out "RequestID,CommonName,NotAfter,RevocationDate" -config "{{ ca_config }}"
      register: cert_output_raw

    - name: Filter expiring certificates using PowerShell
      win_shell: |
        $expiry = (Get-Date).AddDays({{ days_until_expiry }})
        $culture = [System.Globalization.CultureInfo]::CreateSpecificCulture("en-AU")
        $lines = @(
        {% for line in cert_output_raw.stdout_lines %}
          "{{ line.replace('"', '`"') }}"
        {% endfor %}
        )

        $results = @()
        for ($i = 0; $i -lt $lines.Count; $i++) {
          if ($lines[$i] -match '^Issued Request ID:\s*(\S+)') {
            $requestId = $matches[1]
            $commonName = ''
            $notAfterStr = ''
            $revoked = $false

            if ($i+1 -lt $lines.Count -and $lines[$i+1] -match '^Issued Common Name:\s*"?(.+?)"?$') {
              $commonName = $matches[1]
            }
            if ($i+2 -lt $lines.Count -and $lines[$i+2] -match '^Certificate Expiration Date:\s*(.+)$') {
              $notAfterStr = $matches[1]
            }
            if ($i+3 -lt $lines.Count -and $lines[$i+3] -match '^Certificate Revocation Date:\s*(.+)$') {
              $revoked = $true
            }

            try {
              $notAfter = [datetime]::Parse($notAfterStr, $culture)
              if (-not $revoked -and $notAfter -lt $expiry) {
                $results += "RequestID: $requestId`nCommonName: $commonName`nNotAfter: $notAfter`n---"
              }
            } catch {
              $results += "Failed to parse date for RequestID: $requestId`nRaw Date: $notAfterStr`n---"
            }
          }
        }

        $results -join "`n"
      register: cert_output_filtered

    - name: Display filtered expiring certificates
      debug:
        msg: "{{ cert_output_filtered.stdout_lines }}"
