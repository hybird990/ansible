#Survey Inputs
#example "{{ cert_thumbprint }}" b03d22a42a8c7c5d3eea6f7659a4aeb1f17de8aa
#example "{{ cert_export_path }}" C:\temp\renewed\servername_renewed_cert.pfx
#example "{{ pfx_password }}" VMware123!VMware123!
#example "{{ ca_config }}" addns.vmware.local\vmware-ADDNS-CA-1
#update in CertificateTemplate=webserver1 in code
---
- name: Renew a certificate and export it as a PFX on the CA server
  hosts: all
  gather_facts: no
  tasks:

    - name: Ensure export directory exists
      win_file:
        path: "{{ cert_export_path | dirname }}"
        state: directory

    - name: Renew the certificate and export to PFX
      win_shell: |
        $thumb = "{{ cert_thumbprint }}"
        $cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $thumb }

        if (-not $cert) {
            throw "Certificate with thumbprint $thumb not found."
        }

        $infPath = "$env:TEMP\renew.inf"
        $reqPath = "$env:TEMP\renew.req"
        $cerPath = "$env:TEMP\renewed.cer"

        $infContent = @"
[Version]
Signature="$Windows NT$"

[RenewalRequest]
RenewalCert={{ $cert.Thumbprint }}
RenewalCertStore=My
RequestType=PKCS10

[RequestAttributes]
CertificateTemplate=webserver1
"@

        Set-Content -Path $infPath -Value $infContent -Force

        certreq -new $infPath $reqPath
        certreq -submit -config "{{ ca_config }}" $reqPath $cerPath
        certreq -accept $cerPath

        $renewedCert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object {
            $_.Subject -eq $cert.Subject -and $_.NotAfter -gt $cert.NotAfter
        } | Sort-Object NotAfter -Descending | Select-Object -First 1

        if (-not $renewedCert) {
            throw "Renewed certificate not found."
        }

        $securePass = ConvertTo-SecureString "{{ pfx_password }}" -AsPlainText -Force
        Export-PfxCertificate -Cert $renewedCert -FilePath "{{ cert_export_path }}" -Password $securePass -Force

        Write-Output "Certificate renewed and exported to {{ cert_export_path }}"
      args:
        executable: powershell.exe
